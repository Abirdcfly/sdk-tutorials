(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{725:function(e,t,o){"use strict";o.r(t);var a=o(1),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"ibc-application-developer-introduction"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#ibc-application-developer-introduction"}},[e._v("#")]),e._v(" IBC Application Developer Introduction")]),e._v(" "),o("p",[e._v("In the previous section you've learned how to create custom SDK modules. Additionally you've had an introduction to IBC, the ibc-go module in the SDK, and how to spin up a relayer to send IBC packets.")]),e._v(" "),o("p",[e._v("Remember the separation of concerns in IBC between the transport layer (IBC/TAO) and the application layer (IBC/APP): the transport layer provides the basic infrastructure layer to "),o("em",[e._v("transport")]),e._v(", "),o("em",[e._v("authenticate")]),e._v(", and "),o("em",[e._v("order")]),e._v(" arbitrary packets of data; the encoding, decoding, and interpretation of the data to trigger custom application logic is then up to the application layer. In the examples of token transfer sent over IBC, we implicitly used the ICS-20 or "),o("em",[e._v("transfer")]),e._v(" IBC application module provided by the "),o("strong",[e._v("ibc-go")]),e._v(" SDK module (which also provides the core transport layer functionality).")]),e._v(" "),o("p",[e._v("In the following sections you'll learn how to develop your custom IBC application modules, either by upgrading an existing module or starting from scratch using Ignite CLI.")]),e._v(" "),o("highlightbox",[o("p",[e._v("In the "),o("a",{attrs:{href:"https://ibc.cosmos.network/v3.0.0/ibc/integration.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("integration"),o("OutboundLink")],1),e._v(" section of the IBC documentation, the necessary steps to integrate IBC in a Cosmos SDK chain are outlined.")]),e._v(" "),o("p",[e._v("Note that this does not mean that the main application modules turn into IBC modules, it only means IBC is enabled for the chain. The IBC module has come out-of-the-box in Cosmos SDK chains since the 0.40.x version of the SDK, so it is unlikely you'll have to implement these steps manually when developing a chain.")]),e._v(" "),o("p",[e._v("For example, the checkers appchain you developed in the previous section "),o("strong",[e._v("is IBC enabled")]),e._v(". This is revealed when trying to send IBC denoms from other chains to set a wager. However, this does not make the "),o("code",[e._v("x/checkers")]),e._v(" module an IBC-enabled module. We will investigate all the additions we need to make the module IBC-enabled in what follows.")]),e._v(" "),o("h2",{attrs:{id:"structure-of-the-section"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#structure-of-the-section"}},[e._v("#")]),e._v(" Structure of the section")]),e._v(" "),o("p",[e._v("In this section we will first investigate the code required to make a module IBC-enabled. For this conceptual example we will build a simple chain from scratch with Ignite CLI. Ignite CLI provides the option to scaffold an IBC module, which does all of the hard work in terms of boilerplate code. Still, it makes sense to take a look at what exactly has changed. Therefore we will compare the code using a "),o("em",[e._v("git diff")]),e._v(" when scaffolding a chain with a regular module and when we scaffold an IBC module.")]),e._v(" "),o("p",[e._v("A similar approach will be taken to check what Ignite CLI implements when scaffolding an IBC packet.")]),e._v(" "),o("p",[e._v("After finishing the conceptual tour we are going to expand the checkers blockchain you created to turn it into an IBC module, and will create an additional leaderboard blockchain to act as a separate appchain that can interact with the checkers blockchain via IBC.")]),e._v(" "),o("p",[e._v("Let's dive into it!")])])],1)}),[],!1,null,null,null);t.default=n.exports}}]);